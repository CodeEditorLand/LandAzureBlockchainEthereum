{
	"name": "azure-blockchain",
	"displayName": "Blockchain Development Kit for Ethereum",
	"description": "Develop, deploy, debug and manage your Ethereum based blockchain solutions",
	"main": "./out/src/extension.js",
	"scripts": {
		"clean": "npx rimraf -- ./out/*",
		"compile": "npm run clean && tsc -p ./",
		"publish": "npx vsce publish",
		"tslint:fix": "npm run tslint -- --fix",
		"version": "tsc -v",
		"webpack:prod": "webpack --mode production"
	},
	"contributes": {
		"breakpoints": [
			{
				"language": "solidity"
			},
			{
				"language": "sol"
			}
		],
		"commands": [
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.generateMicroservicesWorkflows",
				"title": "Generate Microservices for Smart Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.generateDataPublishingWorkflows",
				"title": "Generate Data Publishing Workflows for Smart Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.generateReportPublishingWorkflows",
				"title": "Generate Report Publishing Workflows for Smart Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.generateEventPublishingWorkflows",
				"title": "Generate Event Publishing Workflows for Smart Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.showWelcomePage",
				"title": "Show Welcome Page"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.refresh",
				"icon": {
					"dark": "resources/dark/refresh.svg",
					"light": "resources/light/refresh.svg"
				},
				"title": "Refresh"
			},
			{
				"category": "Blockchain",
				"command": "contract.copyByteCode",
				"title": "Copy Constructor Bytecode"
			},
			{
				"category": "Blockchain",
				"command": "contract.copyDeployedByteCode",
				"title": "Copy Transaction Bytecode"
			},
			{
				"category": "Blockchain",
				"command": "contract.copyABI",
				"title": "Copy Contract ABI"
			},
			{
				"category": "Blockchain",
				"command": "truffle.newSolidityProject",
				"title": "New Solidity Project"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.buildContracts",
				"title": "Build Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.deployContracts",
				"title": "Deploy Contracts"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.connectProject",
				"title": "Connect to network"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.copyRPCEndpointAddress",
				"title": "Copy RPC Endpoint Address"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.createProject",
				"title": "Create a new network"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.disconnectProject",
				"title": "Disconnect"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.startGanacheServer",
				"title": "Start Ganache Server"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.stopGanacheServer",
				"title": "Stop Ganache Server"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.signInToInfuraAccount",
				"title": "Sign in to Infura account"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.signOutOfInfuraAccount",
				"title": "Sign out of Infura account"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.getPrivateKey",
				"title": "Retrieve private key"
			},
			{
				"category": "Blockchain",
				"command": "extension.truffle.debugTransaction",
				"title": "Debug Transaction"
			},
			{
				"category": "Blockchain",
				"command": "openZeppelin.addCategory",
				"title": "Add contracts from OpenZeppelin"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.openAtAzurePortal",
				"title": "Open at Azure Portal"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.createNewBDMApplication",
				"title": "Create Blockchain Application"
			},
			{
				"category": "Blockchain",
				"command": "azureBlockchainService.deleteBDMApplication",
				"title": "Delete Blockchain Application"
			}
		],
		"configuration": {
			"properties": {
				"azureBlockchainService.coreSDK": {
					"default": "Truffle",
					"enum": [
						"Truffle",
						"OpenZeppelin"
					],
					"scope": "Core SDK for extensions backend",
					"type": "string"
				},
				"azureBlockchainService.ignoreLongRunningTaskNotification": {
					"default": false,
					"description": "Disable notification on long running tasks.",
					"type": "boolean"
				},
				"azureBlockchainService.openZeppelin.version": {
					"default": "2.5.0",
					"scope": "The latest Open Zeppelin version",
					"type": "string"
				},
				"azureBlockchainService.storageAccount.name": {
					"scope": "Storage Account name",
					"type": "string"
				}
			},
			"title": "Blockchain Development Kit for Ethereum"
		},
		"debuggers": [
			{
				"configurationAttributes": {
					"launch": {
						"properties": {
							"files": {
								"default": [],
								"description": "Array of file paths of solidity files to debug",
								"type": "string[]"
							},
							"providerUrl": {
								"default": "http://127.0.0.1:8545",
								"description": "URL of provider",
								"type": "string"
							},
							"stopOnEntry": {
								"default": true,
								"description": "Automatically stop after launch.",
								"type": "boolean"
							},
							"trace": {
								"default": true,
								"description": "Enable logging of the Debug Adapter Protocol.",
								"type": "boolean"
							},
							"txHash": {
								"default": "0x",
								"description": "Transaction hash to debug",
								"type": "string"
							},
							"workingDirectory": {
								"default": "${workspaceFolder}",
								"description": "Directory of truffle box",
								"type": "string"
							}
						},
						"required": []
					}
				},
				"configurationSnippets": [
					{
						"body": {
							"files": [],
							"name": "Debug Transaction with Truffle",
							"providerUrl": "http://127.0.0.1:8545",
							"request": "launch",
							"stopOnEntry": false,
							"txHash": "0x",
							"type": "truffle",
							"workingDirectory": "^\"\\${workspaceFolder}/"
						},
						"description": "Runs the Truffle debugger (truffle) and attaches to a TestRPC instance",
						"label": "Truffle Debugger: Launch"
					}
				],
				"initialConfigurations": [
					{
						"files": [],
						"name": "Debug Transaction with Truffle",
						"providerUrl": "http://127.0.0.1:8545",
						"request": "launch",
						"stopOnEntry": false,
						"txHash": "0x",
						"type": "truffle",
						"workingDirectory": "${workspaceFolder}"
					}
				],
				"label": "Truffle Debugger",
				"program": "./out/src/debugger.js",
				"runtime": "node",
				"type": "truffle",
				"variables": {}
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "azureBlockchainService.refresh",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.copyRPCEndpointAddress",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.disconnectProject",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.generateMicroservicesWorkflows",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateDataPublishingWorkflows",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateEventPublishingWorkflows",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateReportPublishingWorkflows",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "contract.copyByteCode",
					"when": "false"
				},
				{
					"command": "contract.copyDeployedByteCode",
					"when": "false"
				},
				{
					"command": "contract.copyABI",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.buildContracts",
					"when": "azureBlockchainService:isWorkspaceOpen"
				},
				{
					"command": "azureBlockchainService.deployContracts",
					"when": "azureBlockchainService:isWorkspaceOpen"
				},
				{
					"command": "openZeppelin.addCategory",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.openAtAzurePortal",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.deleteBDMApplication",
					"when": "false"
				},
				{
					"command": "azureBlockchainService.createNewBDMApplication",
					"when": "false"
				}
			],
			"explorer/context": [
				{
					"command": "azureBlockchainService.buildContracts",
					"group": "8_buildContractGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.deployContracts",
					"group": "8_buildContractGroup",
					"when": "resourceLangId == json"
				},
				{
					"command": "azureBlockchainService.deployContracts",
					"group": "8_buildContractGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "contract.copyByteCode",
					"group": "9_copyFromContractGroup",
					"when": "resourceLangId == json"
				},
				{
					"command": "contract.copyDeployedByteCode",
					"group": "9_copyFromContractGroup",
					"when": "resourceLangId == json"
				},
				{
					"command": "contract.copyABI",
					"group": "9_copyFromContractGroup",
					"when": "resourceLangId == json"
				},
				{
					"command": "azureBlockchainService.generateMicroservicesWorkflows",
					"group": "9_generationGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateDataPublishingWorkflows",
					"group": "9_generationGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateEventPublishingWorkflows",
					"group": "9_generationGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "azureBlockchainService.generateReportPublishingWorkflows",
					"group": "9_generationGroup",
					"when": "resourceLangId == solidity"
				},
				{
					"command": "openZeppelin.addCategory",
					"group": "8_buildContractGroup",
					"when": "resourceLangId == solidity"
				}
			],
			"view/item/context": [
				{
					"command": "azureBlockchainService.disconnectProject",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == project"
				},
				{
					"command": "azureBlockchainService.startGanacheServer",
					"group": "azureBlockchain-1@0",
					"when": "view == AzureBlockchain && viewItem == localproject"
				},
				{
					"command": "azureBlockchainService.stopGanacheServer",
					"group": "azureBlockchain-1@1",
					"when": "view == AzureBlockchain && viewItem == localproject"
				},
				{
					"command": "azureBlockchainService.disconnectProject",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == localproject"
				},
				{
					"command": "azureBlockchainService.disconnectProject",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == bdmproject"
				},
				{
					"command": "azureBlockchainService.copyRPCEndpointAddress",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == network"
				},
				{
					"command": "azureBlockchainService.copyRPCEndpointAddress",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == localnetwork"
				},
				{
					"command": "azureBlockchainService.openAtAzurePortal",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == input"
				},
				{
					"command": "azureBlockchainService.openAtAzurePortal",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == output"
				},
				{
					"command": "azureBlockchainService.createNewBDMApplication",
					"group": "azureBlockchain-1@1",
					"when": "view == AzureBlockchain && viewItem == bdmproject"
				},
				{
					"command": "azureBlockchainService.deleteBDMApplication",
					"group": "azureBlockchain-0@0",
					"when": "view == AzureBlockchain && viewItem == bdmApplication"
				}
			],
			"view/title": [
				{
					"command": "azureBlockchainService.showWelcomePage",
					"when": "view == AzureBlockchain"
				},
				{
					"command": "azureBlockchainService.createProject",
					"when": "view == AzureBlockchain"
				},
				{
					"command": "azureBlockchainService.connectProject",
					"when": "view == AzureBlockchain"
				},
				{
					"command": "azureBlockchainService.refresh",
					"group": "navigation",
					"when": "view == AzureBlockchain"
				}
			]
		},
		"views": {
			"debug": [
				{
					"id": "InstructionView",
					"name": "Instructions"
				}
			],
			"explorer": [
				{
					"id": "AzureBlockchain",
					"name": "Blockchain Networks"
				}
			]
		}
	},
	"activationEvents": [
		"onView:AzureBlockchain",
		"onCommand:azureBlockchainService.showWelcomePage",
		"onCommand:azureBlockchainService.refresh",
		"onCommand:contract.copyByteCode",
		"onCommand:contract.copyDeployedByteCode",
		"onCommand:contract.copyABI",
		"onCommand:truffle.createLocalUI",
		"onCommand:truffle.newSolidityProject",
		"onCommand:azureBlockchainService.buildContracts",
		"onCommand:azureBlockchainService.deployContracts",
		"onCommand:azureBlockchainService.generateReportPublishingWorkflows",
		"onCommand:azureBlockchainService.generateMicroservicesWorkflows",
		"onCommand:azureBlockchainService.generateEventPublishingWorkflows",
		"onCommand:azureBlockchainService.generateDataPublishingWorkflows",
		"onCommand:azureBlockchainService.connectProject",
		"onCommand:azureBlockchainService.copyRPCEndpointAddress",
		"onCommand:azureBlockchainService.createProject",
		"onCommand:azureBlockchainService.disconnectProject",
		"onCommand:extension.truffle.debugTransaction",
		"onCommand:openZeppelin.addCategory",
		"onCommand:azureBlockchainService.signInToInfuraAccount",
		"onCommand:azureBlockchainService.signOutOfInfuraAccount",
		"onCommand:azureBlockchainService.openAtAzurePortal",
		"onCommand:azureBlockchainService.createNewBDMApplication",
		"onCommand:azureBlockchainService.deleteBDMApplication",
		"onDebug"
	],
	"husky": {
		"hooks": {
			"pre-commit": "lint-staged && npm run compile"
		}
	},
	"lint-staged": {
		"*.ts": [
			"npx tslint -t verbose",
			"git add"
		]
	},
	"dependencies": {
		"@truffle/debug-utils": "1.0.19",
		"@truffle/debugger": "5.0.35",
		"@truffle/provider": "0.2.1",
		"abi-decoder": "2.0.1",
		"acorn": "6.1.1",
		"acorn-walk": "6.1.1",
		"astring": "1.7.5",
		"bip39": "3.0.1",
		"download": "7.1.0",
		"fs-extra": "7.0.1",
		"hdkey": "1.1.1",
		"ms-rest": "2.5.0",
		"open": "6.4.0",
		"request": "2.88.0",
		"request-promise": "4.2.4",
		"semver": "6.0.0",
		"solidity-parser-antlr": "0.4.11",
		"uuid": "3.3.2"
	},
	"devDependencies": {
		"@types/download": "6.2.4",
		"@types/estree": "0.0.39",
		"@types/fs-extra": "7.0.0",
		"@types/glob": "7.1.1",
		"@types/hdkey": "0.7.0",
		"@types/node": "10.12.21",
		"@types/request": "2.48.1",
		"@types/request-promise": "4.1.44",
		"@types/rewire": "2.5.28",
		"@types/semver": "6.0.0",
		"@types/sinon": "7.0.11",
		"@types/source-map": "0.5.2",
		"@types/uuid": "3.4.4",
		"decache": "4.5.1",
		"glob": "7.1.4",
		"lint-staged": "8.2.0",
		"rewire": "4.0.1",
		"sinon": "7.3.2",
		"truffle": "5.0.14",
		"ts-loader": "7.0.2"
	},
	"extensionDependencies": [
		"JuanBlanco.solidity",
		"ms-vscode.azure-account"
	],
	"icon": "images/blockchain-service-logo.png",
	"preview": false,
	"aiKey": "INSERTAIKEY"
}
